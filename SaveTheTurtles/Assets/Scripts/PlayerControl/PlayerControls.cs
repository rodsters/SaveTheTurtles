//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Scripts/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Keybinds"",
            ""id"": ""86e175d6-b2e4-4db9-bce7-db0a2ce1a037"",
            ""actions"": [
                {
                    ""name"": ""RangeIncrease"",
                    ""type"": ""Button"",
                    ""id"": ""7e0c6316-513b-47ae-8fd1-72c157abdc07"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SpreadIncrease"",
                    ""type"": ""Button"",
                    ""id"": ""b1913063-75e5-448a-a115-ac6c4e73c365"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""00bbf733-7ed3-47cf-a72f-f0b076fced4c"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""RangeIncrease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""18bbb68c-0b00-4e8b-b67b-71e994478485"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard&Mouse"",
                    ""action"": ""SpreadIncrease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard&Mouse"",
            ""bindingGroup"": ""Keyboard&Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Joystick"",
            ""bindingGroup"": ""Joystick"",
            ""devices"": [
                {
                    ""devicePath"": ""<Joystick>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""XR"",
            ""bindingGroup"": ""XR"",
            ""devices"": [
                {
                    ""devicePath"": ""<XRController>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Keybinds
        m_Keybinds = asset.FindActionMap("Keybinds", throwIfNotFound: true);
        m_Keybinds_RangeIncrease = m_Keybinds.FindAction("RangeIncrease", throwIfNotFound: true);
        m_Keybinds_SpreadIncrease = m_Keybinds.FindAction("SpreadIncrease", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Keybinds
    private readonly InputActionMap m_Keybinds;
    private IKeybindsActions m_KeybindsActionsCallbackInterface;
    private readonly InputAction m_Keybinds_RangeIncrease;
    private readonly InputAction m_Keybinds_SpreadIncrease;
    public struct KeybindsActions
    {
        private @KeyControls m_Wrapper;
        public KeybindsActions(@KeyControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @RangeIncrease => m_Wrapper.m_Keybinds_RangeIncrease;
        public InputAction @SpreadIncrease => m_Wrapper.m_Keybinds_SpreadIncrease;
        public InputActionMap Get() { return m_Wrapper.m_Keybinds; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeybindsActions set) { return set.Get(); }
        public void SetCallbacks(IKeybindsActions instance)
        {
            if (m_Wrapper.m_KeybindsActionsCallbackInterface != null)
            {
                @RangeIncrease.started -= m_Wrapper.m_KeybindsActionsCallbackInterface.OnRangeIncrease;
                @RangeIncrease.performed -= m_Wrapper.m_KeybindsActionsCallbackInterface.OnRangeIncrease;
                @RangeIncrease.canceled -= m_Wrapper.m_KeybindsActionsCallbackInterface.OnRangeIncrease;
                @SpreadIncrease.started -= m_Wrapper.m_KeybindsActionsCallbackInterface.OnSpreadIncrease;
                @SpreadIncrease.performed -= m_Wrapper.m_KeybindsActionsCallbackInterface.OnSpreadIncrease;
                @SpreadIncrease.canceled -= m_Wrapper.m_KeybindsActionsCallbackInterface.OnSpreadIncrease;
            }
            m_Wrapper.m_KeybindsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @RangeIncrease.started += instance.OnRangeIncrease;
                @RangeIncrease.performed += instance.OnRangeIncrease;
                @RangeIncrease.canceled += instance.OnRangeIncrease;
                @SpreadIncrease.started += instance.OnSpreadIncrease;
                @SpreadIncrease.performed += instance.OnSpreadIncrease;
                @SpreadIncrease.canceled += instance.OnSpreadIncrease;
            }
        }
    }
    public KeybindsActions @Keybinds => new KeybindsActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard&Mouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    private int m_JoystickSchemeIndex = -1;
    public InputControlScheme JoystickScheme
    {
        get
        {
            if (m_JoystickSchemeIndex == -1) m_JoystickSchemeIndex = asset.FindControlSchemeIndex("Joystick");
            return asset.controlSchemes[m_JoystickSchemeIndex];
        }
    }
    private int m_XRSchemeIndex = -1;
    public InputControlScheme XRScheme
    {
        get
        {
            if (m_XRSchemeIndex == -1) m_XRSchemeIndex = asset.FindControlSchemeIndex("XR");
            return asset.controlSchemes[m_XRSchemeIndex];
        }
    }
    public interface IKeybindsActions
    {
        void OnRangeIncrease(InputAction.CallbackContext context);
        void OnSpreadIncrease(InputAction.CallbackContext context);
    }
}
